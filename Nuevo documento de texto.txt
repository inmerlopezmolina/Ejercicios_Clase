using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text.RegularExpressions;
using System.Text;
using System;

class Solution
{

    // Complete the largestPermutation function below.
    static int[] largestPermutation(int k, int[] arr)
    {
        var len = arr.Length;
        var max = len;
        var dicArr = new Dictionary<int, int>();
        for (var i = 0; i < arr.Length; i++)
        {
            dicArr[arr[i]] = i;
        }
        var continues = 0;
        for (var i = 0; i < Math.Min(k, len) + continues && i < len; i++)
        {
            if (arr[i] == max - i)
            {
                continues++;
                continue;
            }
            var buff = arr[i];
            arr[i] = max - i;
            arr[dicArr[arr[i]]] = buff;
            dicArr[buff] = dicArr[arr[i]];
        }
        return arr;
        //var mini = arr.Max();
        //for (int i = 0; i < arr.Length; i++)
        //{

        //Math.Min(k, len) + continues && i

        //}

    }

    static void Main(string[] args)
    {
       // TextWriter textWriter = new StreamWriter(@System.Environment.GetEnvironmentVariable("OUTPUT_PATH"), true);

        string[] nk = Console.ReadLine().Split(' ');

        int n = Convert.ToInt32(nk[0]);

        int k = Convert.ToInt32(nk[1]);

        int[] arr = Array.ConvertAll(Console.ReadLine().Split(' '), arrTemp => Convert.ToInt32(arrTemp))
        ;
        int[] result = largestPermutation(k, arr);

        Console.WriteLine(string.Join(" ", result));

        //   textWriter.Flush();
        //   textWriter.Close();
        Console.ReadKey();
    }
}

